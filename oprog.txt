Been doing this for 30 years (Score:4, Insightful)

by EmperorOfCanada ( 1332175 ) on Monday October 31, 2016 @01:52AM (#53182125)

I am shocked at the number of 20 somethings that are a decade or more out of date. I am not talking about jumping on the latest and greatest, node.go or whatever, but simply aren't using the latest version (often off by years) of their existing tools. I am not talking religious wars such as C++ vs Java, but programmers who aren't using testing, not using any code analysis tools, not using patterns properly, using globals like they were bicyclist in a performance enhancing drug mart, and all the usual bad practices.

Then to make it worse they will use "modern" techniques like they are some magic spell. If you way-over apply the technique, then it will magically make up for the lousy choice in just about everything else. Let's use multi inheritance OOP on our single SQL call to the single table in the single database. Or let's use the factory pattern for what should have been a single function that takes one parameter.

I am not leaving older programmers out of this. Usually there are subtle differences. They don't realize that things have massively changed in the last 10 years. Threads aren't bad, the GPU can do stuff, disk is pretty much free, don't conserve memory in your single purpose server with 32GB and your application is only using 2.

My advice for any programmer, young or old, is to be flexible. A great choice may not really be the great choice, it may be an illusion. So be prepared to change. And experiment. Lots and lots of experiments. Try out new languages. Try out new datastores. Try out new OSs. Try out new IDEs. If you see the cool kids doing something that requires a fundamental new skill that you don't have, then learn the fundamental new skill. With ML you need linear algebra and some calculus to really get to the meat of the subject. So learn the libraries and if they seem like your future, learn the fundamentals.

To be a great programmer you have to be both a specialist and a Renaissance man. So nail something like C++ networking(as just one specialist example), but make sure you can configure a database, set up a server, program in Python, etc.

Then there are the domains of knowledge. This is where it can get tricky. Do you perfect the game industry, or do you jump from games, to banking, to engine control units? We all know that having a diverse experience will really help. I am dead certain that what you learn in games could easily bring some wildly creative approaches to engine control units; yet the HR types are "How many years have you been working with ECUs?" I have successfully leapt more than once from pretty fundamental tech to completely different fundamental tech. Not easy, but very worth it.
